name: Publish to itch.io

on: workflow_dispatch

env:
  # update with the name of the main binary
  binary: le-test-game
  itch_target: aeon-felis/le-test

jobs:
  # Build for wasm
  build-wasm:
    runs-on: ubuntu-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name ${{ env.binary }} --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ env.binary }}.wasm
          cp -r assets wasm/

      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: wasm
          dest: ${{ env.binary }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: wasm

  # Build for Linux
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: linux

  # Build for Windows
  build-windows:
    runs-on: windows-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          override: true

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r assets windows/

      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: windows
          dest: ${{ env.binary }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.zip
          name: windows

  # Build for macOS
  build-mac:
    runs-on: macOS-latest

    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}.dmg

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.binary }}.dmg
          name: mac

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - build-wasm
      - build-linux
      - build-windows
      - build-mac

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: .

      - name: Extract artifacts
        run: |
          mkdir channels
          for file in *.zip; do
              echo $file ${file%.zip}
              unzip $file -d channels/${file%.zip}
          done

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V

      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls channels); do
              butler push channels/$channel/* ${{ env.itch_target }}:$channel
          done

      #- name: Upload WASM
        #uses: manleydev/butler-publish-itchio-action@master
        #env:
          #CHANNEL: wasm
          #PACKAGE: ${{ env.binary }}-wasm.zip

      #- name: Upload Linux
        #uses: manleydev/butler-publish-itchio-action@master
        #env:
          #CHANNEL: linux
          #PACKAGE: ${{ env.binary }}-linux.zip

      #- name: Upload Windows
        #uses: manleydev/butler-publish-itchio-action@master
        #env:
          #CHANNEL: windows
          #PACKAGE: ${{ env.binary }}-windows.zip

      #- name: Upload Mac
        #uses: manleydev/butler-publish-itchio-action@master
        #env:
          #CHANNEL: mac
          #PACKAGE: ${{ env.binary }}-mac.dmg
